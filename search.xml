<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linked list</title>
      <link href="/2024/03/21/linked-list/"/>
      <url>/2024/03/21/linked-list/</url>
      
        <content type="html"><![CDATA[<h1 id="Linked-list"><a href="#Linked-list" class="headerlink" title="Linked list"></a>Linked list</h1><p>A linked list is a data structure where elements, called <strong>nodes</strong>, are connected in a linear sequence. Each node contains data and a reference to the next node. This structure allows for dynamic memory allocation and efficient insertion and deletion operations.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Head -&gt; [Node1] -&gt; [Node2] -&gt; [Node3] -&gt; ... -&gt; [NodeN] -&gt; NULL</span><br></pre></td></tr></table></figure><ul><li><strong>Head</strong> points to the first node in the list.</li><li>Each box represents a <strong>node</strong>.</li><li>Inside each box, there is <strong>data</strong> and an arrow pointing to the next node in the sequence.</li><li>The arrow from one node to another signifies the connection between nodes.</li><li>The last node points to <strong>NULL</strong>, indicating the end of the list.</li></ul><h1 id="How-to-implement-a-linked-list"><a href="#How-to-implement-a-linked-list" class="headerlink" title="How to implement a linked list"></a>How to implement a linked list</h1><ol><li>Define a <strong>Node</strong> structure</li><li>Initialize the <strong>Head</strong> pointer</li><li>Implement insertion<ol><li>Create a New Node</li><li>Update the data</li><li>If the list is empty: <ol><li>Update the head pointer to point to the new node.</li><li>Set the “next” pointer of the new node to point to “NULL”</li></ol></li><li>Insertion at the Front<ol><li>Adjust Pointers <ol><li>Set the “next” pointer of the new node to point to the current head of the list.</li><li>Update the head pointer to point to the new node.</li></ol></li></ol></li><li>Insertion at the Back<ol><li>Traverse to the End of the List (last_node)</li><li>Adjust Pointers<ol><li>Set the “next” pointer of the last node to point to the new node, making it the new last node.</li><li>Set the “next” pointer of the new node to NULL.</li></ol></li></ol></li></ol></li></ol><h1 id="Implement-a-linked-list-in-C"><a href="#Implement-a-linked-list-in-C" class="headerlink" title="Implement a linked list in C++"></a>Implement a linked list in C++</h1><ol><li>Define a <strong>Node</strong> structure <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Initialize the <strong>Head</strong> pointer<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in main</span></span><br><span class="line">node *head;</span><br><span class="line">head.next = <span class="literal">nullptr</span>; <span class="comment">//nullptr = NULL</span></span><br></pre></td></tr></table></figure></li><li>Implement insertion <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> data;</span><br><span class="line">cin &gt;&gt; data;</span><br></pre></td></tr></table></figure><ol><li>Create a New Node   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node* newNode = <span class="keyword">new</span> Node;</span><br></pre></td></tr></table></figure></li><li>Update the data  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newNode-&gt;data = data;</span><br></pre></td></tr></table></figure></li><li>If the list is empty  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(head-&gt;next == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    head-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;next = <span class="literal">nullptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Insertion at the Front<ol><li>Adjust Pointers    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newNode-&gt;next = head-&gt;next; </span><br><span class="line"></span><br><span class="line">head-&gt;next = newNode;</span><br></pre></td></tr></table></figure></li></ol></li><li>Insertion at the Back<ol><li>Traverse to the End of the List (last_node)   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node* last_node = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(last_node-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">    last_node = last_node-&gt;next;</span><br></pre></td></tr></table></figure></li><li>Adjust Pointers   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last_node-&gt;next = newNode;</span><br><span class="line">newNode-&gt;next = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><details open>  <summary style="font-size: 20px;">linked list in C++ with functions to insert nodes at the front and back of the list</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the Node structure</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the LinkedList class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="built_in">LinkedList</span>() : <span class="built_in">head</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to insert a node at the front of the list</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertFront</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a new node</span></span><br><span class="line">        Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Make the new node point to the current head</span></span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Update the head to point to the new node</span></span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to insert a node at the back of the list</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertBack</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a new node</span></span><br><span class="line">        Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the list is empty, make the new node the head</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Traverse to the end of the list</span></span><br><span class="line">        Node* current = head;</span><br><span class="line">        <span class="keyword">while</span> (current-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Make the last node point to the new node</span></span><br><span class="line">        current-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to delete a node from the front of the list</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Check if the list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;List is empty. Cannot delete from an empty list.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Store a pointer to the current head</span></span><br><span class="line">        Node* temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the head to point to the next node</span></span><br><span class="line">        head = head-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete the original head node</span></span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to delete a node from the back of the list</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Check if the list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;List is empty. Cannot delete from an empty list.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the list has only one node, delete it</span></span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> head;</span><br><span class="line">            head = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Traverse to the second-to-last node</span></span><br><span class="line">        Node* current = head;</span><br><span class="line">        <span class="keyword">while</span> (current-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete the last node</span></span><br><span class="line">        <span class="keyword">delete</span> current-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the next pointer of the second-to-last node to null</span></span><br><span class="line">        current-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to display the linked list</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node* current = head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a LinkedList object</span></span><br><span class="line">    LinkedList list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test</span></span><br><span class="line">    list.<span class="built_in">insertFront</span>(<span class="number">3</span>);</span><br><span class="line">    list.<span class="built_in">insertFront</span>(<span class="number">2</span>);</span><br><span class="line">    list.<span class="built_in">insertFront</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;List after inserting at the front: &quot;</span>;</span><br><span class="line">    list.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">deleteFront</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;List after deleting from the front: &quot;</span>;</span><br><span class="line">    list.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">insertBack</span>(<span class="number">4</span>);</span><br><span class="line">    list.<span class="built_in">insertBack</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;List after inserting at the back: &quot;</span>;</span><br><span class="line">    list.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">deleteBack</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;List after deleting from the back: &quot;</span>;</span><br><span class="line">    list.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List after inserting at the front: 1 2 3 </span><br><span class="line">List after deleting from the front: 2 3</span><br><span class="line">List after inserting at the back: 2 3 4 5</span><br><span class="line">List after deleting from the back: 2 3 4</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Data structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic C++</title>
      <link href="/2024/03/11/Basic-C/"/>
      <url>/2024/03/11/Basic-C/</url>
      
        <content type="html"><![CDATA[<h1 id="Selection-Structure"><a href="#Selection-Structure" class="headerlink" title="Selection Structure"></a>Selection Structure</h1><h2 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    <span class="comment">// Code to execute if condition is true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-else-statement"><a href="#if-else-statement" class="headerlink" title="if-else statement"></a>if-else statement</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    <span class="comment">// Code to execute if condition is true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// Code to execute if condition is false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="multiple-selection-structure"><a href="#multiple-selection-structure" class="headerlink" title="multiple selection structure"></a>multiple selection structure</h1><h2 id="if-else-else-statement"><a href="#if-else-else-statement" class="headerlink" title="if-else-else statement"></a>if-else-else statement</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition1)&#123;</span><br><span class="line">    <span class="comment">// Code to execute if condition1 is true</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(condition2)&#123;</span><br><span class="line">    <span class="comment">// Code to execute if condition1 is false and condition2 is true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// Code to execute if both condition1 and condition2 are false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(variable)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">// Code to execute if variable equals 1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">// Code to execute if variable equals 2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Code to execute if variable doesn&#x27;t equal any of the above cases</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h1><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">    <span class="comment">// Code to execute as long as condition is true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(initialization; condition; increment)&#123;</span><br><span class="line">    <span class="comment">// Code to execute for each loop iteration</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="array"><a href="#array" class="headerlink" title="array"></a>array</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType arrayName[arraySize];</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;; <span class="comment">// Initialize the first two elements of the array to 0 and 1, the rest will be default initialized to 0</span></span><br><span class="line"><span class="comment">// a = &#123;0, 1, 0, 0, 0&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = &#123;0, 1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> if </tag>
            
            <tag> loop </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo setup</title>
      <link href="/2024/03/10/Hexo%20setup/"/>
      <url>/2024/03/10/Hexo%20setup/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
